[package]
name = "pleezer"
version = "0.6.0"
authors = ["Roderick van Domburg"]
description = "Headless Deezer Connect player"
edition = "2021"
rust-version = "1.82"
license-file = "LICENSE.md"
readme = "README.md"
repository = "https://github.com/roderickvd/pleezer/"
categories = ["multimedia::audio"]
keywords = ["audio", "deezer", "player"]
exclude = ["secrets.toml"]
documentation = "https://docs.rs/pleezer"

[badges]
maintenance = { status = "actively-developed" }

[features]
default = ["binary"]

## Enable command-line interface and binary build
binary = ["dep:clap"]

## Enable ASIO (Audio Stream Input/Output) backend for low-latency audio (Windows only)
## Requires Steinberg ASIO SDK and additional build setup
## See: https://docs.rs/crate/cpal/latest
asio = ["cpal/asio"]

## Enable JACK (JACK Audio Connection Kit) backend for low-latency audio with flexible routing  (Linux only)
## Requires JACK development files:
## - Debian/Ubuntu: libjack-dev
## - Fedora: jack-audio-connection-kit-devel
jack = ["cpal/jack"]

[dependencies]
base64 = "0.22"
blowfish = "0.9"
cbc = "0.1"
cpal = "0.15"
env_logger = { version = "0.11", default-features = false, features = [
    "auto-color",
    "humantime",
] }
exponential-backoff = "2.0"
fastrand = "2.3"
flate2 = "1.0"
futures-util = { version = "0.3", default-features = false }
governor = { version = "0.8", default-features = false, features = ["std"] }
http = "1.2"
log = "0.4"
machine-uid = "0.5"
md-5 = "0.10"
protobuf = { version = "3", features = ["with-bytes"] }
regex-lite = "0.1"
reqwest = { version = "0.12", default-features = false, features = [
    "brotli",
    "cookies",
    "gzip",
    "json",
    "rustls-tls-native-roots",
    "stream",
] }
rodio = { version = "0.20", default-features = false, features = [
    "symphonia-flac",
    "symphonia-mp3",
] }
semver = "1.0"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_repr = "0.1"
serde_with = { version = "3.11", features = ["json"] }
shell-escape = "0.1"
stream-download = { version = "0.13", features = ["reqwest-rustls"] }
sysinfo = { version = "0.33", default-features = false, features = ["system"] }
thiserror = "2"
time = "0.3"
tokio = { version = "1", features = [
    "macros",
    "rt-multi-thread",
    "signal",
    "sync",
    "time",
] }
tokio-tungstenite = { version = "0.24", features = ["rustls-tls-native-roots"] }
tokio-util = "0.7"
toml = "0.8"
url = { version = "2.5", features = ["serde"] }
uuid = { version = "1.11", features = ["serde", "v4"] }
veil = "0.2"

[[bin]]
name = "pleezer"
path = "src/main.rs"
required-features = ["binary"]

[lib]
doctest = false

[dependencies.clap]
version = "4.5"
features = ["cargo", "derive", "env", "wrap_help"]
optional = true

[build-dependencies]
git2 = { version = "0.19", default-features = false }
protobuf-codegen = "3"
protoc-bin-vendored = "3"
time = { version = "0.3", features = ["formatting"] }

[profile.release]
# Default optimization settings balanced for minimum supported hardware
# (Raspberry Pi 3B+ with 1GB RAM). These settings provide good optimization
# while avoiding memory exhaustion during builds.
lto = "thin"      # Enable Thin Link Time Optimization
codegen-units = 1 # Optimize across the entire program

# For systems with more RAM, maximum runtime performance can be achieved
# by using full LTO (not supported by the mold linker):
#
# lto = true        # Enable Full Link Time Optimization

[package.metadata.deb]
copyright = "2024, Roderick van Domburg"
depends = "libasound2"
suggests = "libjack-dev"
section = "sound"
priority = "optional"
assets = [
    [
        "target/release/pleezer",
        "usr/bin/",
        "755",
    ],
    [
        "README.md",
        "usr/share/doc/pleezer/README.md",
        "644",
    ],
    [
        "LICENSE.md",
        "usr/share/doc/pleezer/LICENSE.md",
        "644",
    ],
    [
        "secrets.toml.example",
        "usr/share/doc/pleezer/secrets.toml.example",
        "644",
    ],
]
extended-description = """\
A headless streaming player built around the Deezer Connect protocol. \
Enables streaming from Deezer to any Linux system without a graphical interface, \
making it ideal for DIY setups, server-based systems, or custom integrations."""

[package.metadata.docs.rs]
all-features = true
